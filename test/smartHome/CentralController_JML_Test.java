/*
 * Test Oracle Class for smartHome.CentralController
 * For Use With OpenJML RAC
 *
 * Generated by JMLUnitNG 1.4 (116/OpenJML-20131218-REV3178), 2018-01-08 21:21 +0200.
 * (do not modify this comment, it is used by JMLUnitNG clean-up routines)
 */

package smartHome;


import java.io.PrintWriter;
import java.util.ArrayList;

import org.jmlspecs.jmlunitng.iterator.IteratorWrapper;
import org.jmlspecs.jmlunitng.iterator.ParameterArrayIterator;
import org.jmlspecs.jmlunitng.testng.BasicTestListener;
import org.jmlspecs.jmlunitng.testng.PreconditionSkipException;
import org.testng.Assert;
import org.testng.TestException;
import org.testng.TestNG;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;
import org.testng.xml.XmlSuite;

import org.jmlspecs.utils.JmlAssertionError;
import org.jmlspecs.utils.Utils; 

import smartHome.CentralController_JML_Data.*;


/**
 * Test oracles generated by JMLUnitNG for OpenJML RAC of class
 * smartHome.CentralController.
 * 
 * @author JMLUnitNG 1.4 (116/OpenJML-20131218-REV3178)
 * @version 2018-01-08 21:21 +0200
 */

public /*@ nullable_by_default */ class CentralController_JML_Test {
  /**
   * The main method. Allows the tests to be run without a testng.xml or
   * the use of the TestNG executable/plugin.
   *
   * @param the_args Command line arguments, ignored.
   */
  public static void main(String[] the_args) {
    final TestNG testng_runner = new TestNG();
    final Class<?>[] classes = {CentralController_JML_Test.class};
    final BasicTestListener listener =
      new BasicTestListener(new PrintWriter(System.out));
    testng_runner.setUseDefaultListeners(false);
    testng_runner.setXmlSuites(new ArrayList<XmlSuite>());
    testng_runner.setTestClasses(classes);
    testng_runner.addListener(listener);
    testng_runner.run();
  }

  /** 
   * A test to ensure that RAC is enabled before running other tests;
   * this also turns on RAC exceptions if they were not already turned on.
   */
  @Test
  public void test_racEnabled() {
    Utils.useExceptions = true;
    Assert.assertFalse
    (Utils.isRACCompiled(CentralController_JML_Test.class),
     "JMLUnitNG tests must not be RAC-compiled when using OpenJML RAC.");
    Assert.assertTrue
    (Utils.isRACCompiled(smartHome.CentralController.class),
     "JMLUnitNG tests can only run on RAC-compiled code.");
  } 

  /**
   * A test for method getRoomLight.
   *
   * @param the_test_object The CentralController to call the test method on.
   * @param roomId The int to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_getRoomLight__int_roomId__0")
  public void test_getRoomLight__int_roomId__0
  (final smartHome.CentralController the_test_object, 
   final int roomId) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.getRoomLight(roomId);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_getRoomLight__int_roomId__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for a constructor.
   *
   */
  @Test(dependsOnMethods = { "test_racEnabled" })
  public void test_CentralController__0
  () {
    try {
      new smartHome.CentralController();
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_CentralController__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method getRoomHeatingController.
   *
   * @param the_test_object The CentralController to call the test method on.
   * @param roomId The int to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_getRoomHeatingController__int_roomId__0")
  public void test_getRoomHeatingController__int_roomId__0
  (final smartHome.CentralController the_test_object, 
   final int roomId) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.getRoomHeatingController(roomId);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_getRoomHeatingController__int_roomId__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method addRoomController.
   *
   * @param the_test_object The CentralController to call the test method on.
   * @param room The RoomController to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_addRoomController__RoomController_room__10")
  public void test_addRoomController__RoomController_room__10
  (final smartHome.CentralController the_test_object, 
   final smartHome.RoomController room) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.addRoomController(room);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_addRoomController__RoomController_room__10".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method getRoomLightingController.
   *
   * @param the_test_object The CentralController to call the test method on.
   * @param roomId The int to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_getRoomLightingController__int_roomId__0")
  public void test_getRoomLightingController__int_roomId__0
  (final smartHome.CentralController the_test_object, 
   final int roomId) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.getRoomLightingController(roomId);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_getRoomLightingController__int_roomId__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method setRoomAutomaticLight.
   *
   * @param the_test_object The CentralController to call the test method on.
   * @param roomId The int to be passed.
   * @param lux The int to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_setRoomAutomaticLight__int_roomId__int_lux__0")
  public void test_setRoomAutomaticLight__int_roomId__int_lux__0
  (final smartHome.CentralController the_test_object, 
   final int roomId, final int lux) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.setRoomAutomaticLight(roomId, lux);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_setRoomAutomaticLight__int_roomId__int_lux__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method setRoomManualLight.
   *
   * @param the_test_object The CentralController to call the test method on.
   * @param roomId The int to be passed.
   * @param lux The int to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_setRoomManualLight__int_roomId__int_lux__0")
  public void test_setRoomManualLight__int_roomId__int_lux__0
  (final smartHome.CentralController the_test_object, 
   final int roomId, final int lux) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.setRoomManualLight(roomId, lux);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_setRoomManualLight__int_roomId__int_lux__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method getRoomTemp.
   *
   * @param the_test_object The CentralController to call the test method on.
   * @param roomId The int to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_getRoomTemp__int_roomId__0")
  public void test_getRoomTemp__int_roomId__0
  (final smartHome.CentralController the_test_object, 
   final int roomId) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.getRoomTemp(roomId);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_getRoomTemp__int_roomId__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * Data provider for method java.lang.Integer getRoomLight(int).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_getRoomLight__int_roomId__0", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_getRoomLight__int_roomId__0() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (CentralController_InstanceStrategy.class,
          getRoomLight__int_roomId__0__roomId.class));
  }



  /**
   * Data provider for method heating.HeatingController getRoomHeatingController(int).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_getRoomHeatingController__int_roomId__0", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_getRoomHeatingController__int_roomId__0() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (CentralController_InstanceStrategy.class,
          getRoomHeatingController__int_roomId__0__roomId.class));
  }


  /**
   * Data provider for method smartHome.RoomController addRoomController(RoomController).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_addRoomController__RoomController_room__10", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_addRoomController__RoomController_room__10() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (CentralController_InstanceStrategy.class,
          addRoomController__RoomController_room__10__room.class));
  }


  /**
   * Data provider for method lighting.LightingController getRoomLightingController(int).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_getRoomLightingController__int_roomId__0", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_getRoomLightingController__int_roomId__0() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (CentralController_InstanceStrategy.class,
          getRoomLightingController__int_roomId__0__roomId.class));
  }


  /**
   * Data provider for method void setRoomAutomaticLight(int, int).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_setRoomAutomaticLight__int_roomId__int_lux__0", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_setRoomAutomaticLight__int_roomId__int_lux__0() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (CentralController_InstanceStrategy.class,
          setRoomAutomaticLight__int_roomId__int_lux__0__roomId.class,
                  setRoomAutomaticLight__int_roomId__int_lux__0__lux.class));
  }


  /**
   * Data provider for method void setRoomManualLight(int, int).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_setRoomManualLight__int_roomId__int_lux__0", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_setRoomManualLight__int_roomId__int_lux__0() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (CentralController_InstanceStrategy.class,
          setRoomManualLight__int_roomId__int_lux__0__roomId.class,
                  setRoomManualLight__int_roomId__int_lux__0__lux.class));
  }


  /**
   * Data provider for method java.lang.Double getRoomTemp(int).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_getRoomTemp__int_roomId__0", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_getRoomTemp__int_roomId__0() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (CentralController_InstanceStrategy.class,
          getRoomTemp__int_roomId__0__roomId.class));
  }


  /**
   * Data provider for methods with no parameters.
   * @return An iterator over the main class strategy.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_instance_only", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_instance_only() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator(CentralController_InstanceStrategy.class));
  }
}